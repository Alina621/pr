

const htmlTags = {
    "!--...--":"Используется для добавления комментариев.",
    "!DOCTYPE":"Объявляет тип документа и предоставляет основную информацию для браузера — его язык и версия.",
    "a":"	Создаёт гипертекстовые ссылки.",
    "abbr":"Определяет текст как аббревиатуру или акроним. Поясняющий текст задаётся с помощью атрибута title.",
    "address":"Задает контактные данные автора/владельца документа или статьи. Отображается в браузере курсивом.",
    "blockquote":"Выделяет текст как цитату, применяется для описания больших цитат.",
    "body":"Представляет тело документа (содержимое, не относящееся к метаданным документа).",
    "br":"Перенос текста на новую строку.",
    "button":"Создает интерактивную кнопку. Элемент может содержать текст или изображение.",
    "canvas":"Холст-контейнер для динамического отображения изображений, таких как простые изображения, диаграммы, графики и т.п. Для рисования используется скриптовый язык JavaScript.",
    "caption":"Добавляет подпись к таблице. Вставляется сразу после открывающего тега table.",
    "code":"Представляет фрагмент программного кода, отображается шрифтом семейства monospace.",
    "col":"Выбирает для форматирования один или несколько столбцов таблицы, не содержащих информацию одного типа.",
    "data":"Элемент используется для связывания значения атрибута value, которое представлено в машиночитаемом формате и может быть обработано компьютером, с содержимым элемента.",
    "datalist":"Элемент-контейнер для выпадающего списка элемента input. Варианты значений помещаются в элементы option.",
    "h1-h6":"Создают заголовки шести уровней для связанных с ними разделов.",
    "head":"Элемент-контейнер для метаданных HTML-документа, таких как title, meta, script, link, style.",
    "header	":"Секция для вводной информации сайта или группы навигационных ссылок. Может содержать один или несколько заголовков, логотип, информацию об авторе.",
    "hr":"Горизонтальная линия для тематического разделения параграфов.",
    "html":"Корневой элемент HTML-документа. Сообщает браузеру, что это HTML-документ. Является контейнером для всех остальных html-элементов.",
    "i":"Выделяет отрывок текста курсивом, не придавая ему дополнительный акцент.",
    "iframe":"Создает встроенный фрейм, загружая в текущий HTML-документ другой документ.",
    "img":"Встраивает изображения в HTML-документ с помощью атрибута src, значением которого является адрес встраиваемого изображения.",
    "input":"Создает многофункциональные поля формы, в которые пользователь может вводить данные.",
    "link":"Определяет отношения между документом и внешним ресурсом. Также используется для подключения внешних таблиц стилей.",
    "main":"Контейнер для основного уникального содержимого документа. На одной странице должно быть не более одного элемента main.",
    "map":"Создаёт активные области на карте-изображении. Является контейнером для элементов area.",
    "nav":"Раздел документа, содержащий навигационные ссылки по сайту.",
    "object":"Контейнер для встраивания мультимедиа (например, аудио, видео, Java-апплеты, ActiveX, PDF и Flash). Также можно вставить другую веб-страницу в текущий HTML-документ. Для передачи параметров встраиваемого плагина используется элемент param.",	
    "ol":"Упорядоченный нумерованный список. Нумерация может быть числовая или алфавитная.",	
    "script":"Используется для определения сценария на стороне клиента (обычно JavaScript). Содержит либо текст скрипта, либо указывает на внешний файл сценария с помощью атрибута src.",	
    "section":"Определяет логическую область (раздел) страницы, обычно с заголовком.",	
    "select":"Элемент управления, позволяющий выбирать значения из предложенного множества. Варианты значений помещаются в option.",	
    "span":"Контейнер для строчных элементов. Можно использовать для форматирования отрывков текста, например, выделения цветом отдельных слов.",	
    "strong":"Расставляет акценты в тексте, выделяя полужирным.",	
    "style":"Подключает встраиваемые таблицы стилей.",	
    "summary":"Создаёт видимый заголовок для элемента details. Отображается с закрашенным треугольником, кликнув по которому можно просмотреть подробности заголовка.",	
    "sup":"Задает надстрочное написание символов.",	
    "table":"Элемент для создания таблицы.",	
    "td":"Создает ячейку таблицы.",	
    "th":"Создает заголовок ячейки таблицы.",	
    "time":"Определяет дату/время.",	
    "title":"Заголовок HTML-документа, отображаемый в верхней части строки заголовка браузера. Также может отображаться в результатах поиска, поэтому это следует принимать во внимание предоставление названия.",
    "tr":"Создает строку таблицы.",	
    "u":"Выделяет отрывок текста подчёркиванием, без дополнительного акцента.",	
    "ul":"Создает маркированный список.",	

}

let table = document.querySelector('.tags')
let input = document.querySelector('.input')

function printTag() { //функция printTag, которая получает значение из input, преобразует его в нижний регистр, удаляет существующие строки с классом "tagrow", и если значение input больше 0, то проверяет, есть ли такой тег в объекте htmlTags. Если тег найден, то создает новый элемент tr, добавляет ему класс "tagrow", создает элементы td, добавляет им класс "tag__cell", присваивает им текстовое содержимое из input_value и htmlTags[input_value], 
    //и добавляет их внутрь tr. Затем добавляет tr в таблицу table
    let input_value = input.value.toLowerCase() //обработчик события keyup на элемент input, который при нажатии клавиши Enter вызывает функцию printTag

    let rows = document.querySelector('.tag__row') // Поиск элемента с классом "tag__row" и, если он существует, удаляет его.
    if (rows) {
        rows.remove()
    }
// Затем проверяет, что значение ввода (input_value) имеет длину больше 0. 
//Если это условие выполняется, он проверяет, существует ли html тег с таким именем в объекте htmlTags. 
//Если да, он создает новый элемент "tr", который представляет строку в таблице. 
//Этому элементу назначается класс "tag__row". 
    if (input_value.length > 0) {
        if (htmlTags[input_value]) {
            let tr = document.createElement('tr')
            tr.classList.add('tag__row')
//. Далее создаются два элемента "td" (ячейки): один для имени тега и один для соответствующего ему html тега.
// Элементам присваивается класс "tag__cell" и им назначается текстовое содержимое - имя тега и соответствующий html тег. 
            let td = document.createElement('td')
            td.classList.add('tag__cell')
            td.textContent = input_value
            tr.appendChild(td)

            let td_1 = document.createElement('td')
            td_1.classList.add('tag__cell')
            td_1.textContent = htmlTags[input_value]
            tr.appendChild(td_1)
//Затем созданные ячейки добавляются в строку "tr".

// Наконец, строка "tr" добавляется в таблицу (предположительно уже существующий элемент с таким именем). 
//Если тег не найден в объекте htmlTags, выводится сообщение об ошибке через alert.
            table.appendChild(tr)
        } else {
            alert(`Тег не был найден`)
        }
    }
}
// Отслеживает событие keyup для элемента ввода (input) и, если нажата клавиша "Enter", вызывает функцию printTag().
input.addEventListener('keyup', e => {
    if (e.key === 'Enter') {
        printTag()
    }
})
